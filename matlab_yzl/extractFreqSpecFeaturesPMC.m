%% Extract Frequenct Spectral Features..

function freqSpecSet = extractFreqSpecFeaturesPMC(sample_data, fs)
% system_options = setSystemOptions();

% Extract Segments..
% [frameSet, ~] = segmentByWinTime(...
%     sample_data, fs);

% Compute Freq Spec..
% rawFreqDataSet = cellfun(...
%     @(x)(compFreqSpec(x, fs)), frameSet);

x=compFreqSpec(sample_data, fs);

% Erase Silent Segment..
% rawFreqDataSet = rawFreqDataSet(arrayfun(...
%     @(x)(max(x.amptitude)<1^e-4), rawFreqDataSet));

% Spectral Centroid..
% freqSpecSet.ASC = arrayfun(...
%     @(x)(sum(log2(x.freq(2:end)/1000).*x.amptitude(2:end))/...
%     sum(x.amptitude(2:end))), ...
%     rawFreqDataSet);

freqSpecSet.ASC = sum(log2(x.freq(2:end)/1000).*x.amptitude(2:end))/...
    sum(x.amptitude(2:end));

% Spectral Spread..
% freqSpecSet.ASS = arrayfun(...
%     @(x, pASC)sqrt(sum(((log2(x.freq(2:end)/1000)-pASC).^2).*...
%     x.amptitude(2:end))/sum(x.amptitude(2:end))), ...
%     rawFreqDataSet, ...
%     freqSpecSet.ASC);

freqSpecSet.ASS = sqrt(sum(((log2(x.freq(2:end)/1000)-freqSpecSet.ASC).^2).*...
    x.amptitude(2:end))/sum(x.amptitude(2:end)));

% Spectral Kurtosis..
% freqSpecSet.Kurtosis = arrayfun(...
%     @(x, pASC)sqrt(sum(((log2(x.freq(2:end)/1000)-pASC).^4).*...
%     x.amptitude(2:end))/sum(x.amptitude(2:end))), ...
%     rawFreqDataSet, ...
%     freqSpecSet.ASC);

freqSpecSet.Kurtosis = sqrt(sum(((log2(x.freq(2:end)/1000)-freqSpecSet.ASC).^4).*...
    x.amptitude(2:end))/sum(x.amptitude(2:end)));

% Peak Frequency..
freqSpecSet.DCAmplitude = x.amptitude(1);
freqSpecSet.peakFreq = find(x.amptitude==max(x.amptitude(2:end)), 1);

% Spectral Slope..
% freqSpecSet.specSlope = arrayfun(...
%     @(x)(1/sum(x.amptitude)*...
%     (numel(x.amptitude)*sum(x.freq .* x.amptitude)-sum(x.freq)*sum(x.amptitude))/...
%     (numel(x.amptitude)*sum((x.freq).^2)-(sum(x.freq))^2)), ...
%     rawFreqDataSet);

% Spectral Flux..
freqSpecSet.specFlux = sum(x.amptitude(2:end)-x.amptitude(1:end-1))^2;

% Spectral Decrease..
freqSpecSet.specDecrease = (1/sum(x.amptitude(2:end))*...
    sum((x.amptitude(2:end)-x.amptitude(1))./...
    (1:1:numel(x.amptitude)-1)));

% save debug.mat

% Spectral Roll-Off..
freqSpecSet.specRollOff = x.freq(...
    find(cumsum(x.amptitude.^2)>=0.95*sum(x.amptitude.^2), 1));
end